package volter.com.example.appscrumteam;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import javafx.event.ActionEvent;
import java.sql.*;

public class Chatroom{

    @FXML
    private TextArea chatArea;

    @FXML
    private TextField Input2Field;

    @FXML
    private Button SendButton;

    @FXML
    private Button deleteMessageButton;

    @FXML
    private Button showTrioButton;

    @FXML
    private Button ClearButton;

    @FXML
    private Button Switch2Button;

    private final String URL = "jdbc:mysql://localhost:3306/chatbotdb";
    private final String USER = "root";
    private final String PASSWORD = "24074209190344";

    private boolean isRetrievingTrio = false;

    @FXML
    public void initialize() {
        loadMessages();
        SendButton.setOnAction(e -> sendMessage());
        deleteMessageButton.setOnAction(e -> deleteAllMessages());
        showTrioButton.setOnAction(e -> handleShowTrio());
        ClearButton.setOnAction(e -> chatArea.clear());
    }

    @FXML
    private void handleShowTrio() {
        chatArea.appendText("‚ÑπÔ∏è Enter the Trio ID and press send to display the trio.\n");
        isRetrievingTrio = true;
    }


    @FXML
    private void SwitchScreen(ActionEvent event) {
        try {
            Parent newRoot = FXMLLoader.load(getClass().getResource("chatbot.fxml"));
            Scene newScene = new Scene(newRoot);

            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            currentStage.setScene(newScene);
            currentStage.show();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendMessage() {
        String inputText = Input2Field.getText().trim();
        if (inputText.isEmpty()) return;

        if (isRetrievingTrio) {
            int requestedId;
            try {
                requestedId = Integer.parseInt(inputText);
            } catch (NumberFormatException e) {
                chatArea.appendText("‚ö†Ô∏è Invalid ID format. Please enter a number.\n");
                isRetrievingTrio = false;
                return;
            }

            StringBuilder trioMessage = new StringBuilder();

            try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
                String query = "SELECT * FROM epic_user_story_task_trios WHERE id = ?";
                try (PreparedStatement stmt = conn.prepareStatement(query)) {
                    stmt.setInt(1, requestedId);
                    try (ResultSet rs = stmt.executeQuery()) {
                        if (rs.next()) {
                            String epicDesc = rs.getString("epic_description");
                            String storyDesc = rs.getString("user_story_description");
                            String taskDesc = rs.getString("task_description");

                            trioMessage.append("üìò Epic: ").append(epicDesc).append("\n")
                                    .append("üìó User Story: ").append(storyDesc).append("\n")
                                    .append("üìí Task: ").append(taskDesc).append("\n");
                        } else {
                            trioMessage.append("‚ö†Ô∏è No trio found with ID ").append(requestedId).append(".\n");
                        }
                    }
                }

                String insertChatSql = "INSERT INTO chat (message) VALUES (?)";
                try (PreparedStatement insertChatStmt = conn.prepareStatement(insertChatSql)) {
                    insertChatStmt.setString(1, trioMessage.toString());
                    insertChatStmt.executeUpdate();
                }

            } catch (SQLException e) {
                chatArea.appendText("‚ö†Ô∏è Error retrieving trio: " + e.getMessage() + "\n");
                e.printStackTrace();
            }

            isRetrievingTrio = false;
            Input2Field.clear();
            loadMessages();
            return;
        }

        StringBuilder messageWithTrio = new StringBuilder("You: ").append(inputText);

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            String sql = "INSERT INTO chat (message) VALUES (?)";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, messageWithTrio.toString());
                stmt.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        Input2Field.clear();
        loadMessages();
    }



    private void loadMessages() {
        chatArea.clear();
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            String sql = "SELECT message FROM chat ORDER BY id ASC";
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    chatArea.appendText(rs.getString("message") + "\n");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    @FXML
    private void deleteAllMessages() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            String sql = "DELETE FROM chat";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.executeUpdate();
            }

            String deleteTrioQuery = "DELETE FROM epic_user_story_task_trios";
            try (PreparedStatement stmt = conn.prepareStatement(deleteTrioQuery)) {
                stmt.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        chatArea.clear();
    }
}

